- hosts: localhost
  gather_facts: yes


  vars:
    - my_name: "dreampi"
    - my_file: "install_dreampi"

    - my_packages:
      - git
      - dnsmasq 
      - dnsutils 
      - libnetfilter-queue-dev
      - libnetfilter-queue1 
      - ppp
      - arping 
      - nftables 
      - tcpd 
      - wvdial 
      - python3-pip

    - templates:
      - { name: "{{ my_file }}.sh", dest: "{{ retronas_root }}/scripts", mode: "0755" }
      - { name: "{{ my_name }}.conf", dest: "/etc/dnsmasq.d", force: no }

    - paths:
      - { name: "dnsmasq.d", dest: "/etc" }

  tasks:

  - name: "{{ my_name }} - Checking hw platform compatiblity"
    debug:
      msg: "INCOMPATIBLE PLATFORM, only arm is supported"
    when: '"arm" not in ansible_architecture or "aarch64" not in ansible_architecture'

  - meta: end_play
    when: '"arm" not in ansible_architecture or "aarch64" not in ansible_architecture'

  - name: "{{ my_name }} - Load RetroNAS config"
    include_vars: retronas_vars.yml

  - name: "{{ my_name }} - Install dependencies"
    package:
       name: "{{ my_packages }}"
       state: latest

  - name: "{{ my_name }} - paths"
    file:
      dest: "{{ item.dest }}/{{ item.name }}"
      owner: "{{ item.owner|default('root') }}"
      group: "{{ item.group|default('root') }}"
      mode: "{{ item.mode|default('0755') }}"
      state: "{{ item.state|default('directory') }}"
    with_items: "{{ paths }}"   

  - name: "{{ my_name }} - templates"
    template:
      src: "templates/{{ my_file }}/{{ item.name }}.j2"
      dest: "{{ item.dest }}/{{ item.name }}"
      owner: "{{ item.owner|default('root') }}"
      group: "{{ item.group|default('root') }}"
      mode: "{{ item.mode|default('0644') }}"
      force: "{{ item.force|default('yes') }}"
    with_items: "{{ templates }}"
    notify: "{{ my_name }} Restart Services"

  - name: "{{ my_name }} - Run installer"
    shell:
      cmd: "./{{ my_file }}.sh 2>&1 | tee {{ retronas_root }}/log/{{ my_file }}.log"
      chdir: "{{ retronas_root }}/scripts"
      executable: /bin/bash
    notify: "{{ my_name }} Restart Services"

  handlers:
    - name: "{{ my_name }} Restart Services"
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
        daemon_reload: yes
      with_items:
        - "{{ my_name }}.service"

- import_playbook: retronas_system_config.yml
  vars:
    module_name: "dvdauth"
    module_state: "present"